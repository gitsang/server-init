#!/bin/bash

ARCH=$(uname -m)
if [ "${ARCH}" == "x86_64" ]; then
    ARCH="amd64"
elif [ "${ARCH}" == "aarch64" ]; then
    ARCH="arm64"
fi

if ! command -v go >/dev/null 2>&1 ; then
    DEFAULT_GO_VERSION=go1.22.5
    pushd /tmp || exit
        GOPKG_TGZ=${DEFAULT_GO_VERSION}.linux-${ARCH}.tar.gz
        curl -sSLO https://go.dev/dl/${GOPKG_TGZ}
        rm -rf /usr/local/go && tar -C /usr/local -xzf ${GOPKG_TGZ}
        rm -f ${GOPKG_TGZ}
    popd || exit
    mkdir -p "${GOPATH}" "${GOBIN}"
    export PATH=$PATH:/usr/local/go/bin
fi

if [[ ${#} == 0 ]]; then
    mapfile -t OPTIONAL_VERSIONS < <(find /home/debian/.go/bin -type f -regex '.*\/go[0-9\.]*' -exec basename '{}' ';')
fi
while getopts "r" opt; do
    case ${opt} in
        r)
            mapfile -t OPTIONAL_VERSIONS < <(curl -sL https://golang.org/dl/ | grep -o 'go[0-9.]*\.linux-'${ARCH}'.tar.gz' | sed 's/\.linux-'${ARCH}'.tar.gz//g' | uniq)
            ;;
        *)
            echo "Invalid option: -$OPTARG" >&2
            ;;
    esac
done

SELECTED_VERSION=$(printf "%s\n" "${OPTIONAL_VERSIONS[@]}" | fzf --height 40% --layout reverse)
if [ -n "$SELECTED_VERSION" ]; then
    echo "Selected Go version ${SELECTED_VERSION}"
    if [ ! -f "${GOBIN}/${SELECTED_VERSION}" ]; then
        go install "golang.org/dl/${SELECTED_VERSION}@latest"
    fi
    ln -rsf "${GOBIN}/${SELECTED_VERSION}" "${GOBIN}/go"
    if [ ! -d "${HOME}/sdk/${SELECTED_VERSION}" ]; then
        go download
    fi
fi

if command -v go >/dev/null 2>&1; then
    go version
else
    echo "Go is not installed"
fi
